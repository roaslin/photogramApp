CREATE TABLE users (
id SERIAL PRIMARY KEY,
username VARCHAR(30) NOT NULL,
bio VARCHAR(400),
avatar VARCHAR(200),
phone VARCHAR(25),
email VARCHAR(40),
password VARChAR(50),
status VARCHAR(15),
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
CHECK(COALESCE(email, phone) IS NOT NULL)
);

CREATE TABLE posts (
id SERIAL PRIMARY KEY,
url VARCHAR(200) NOT NULL,
caption VARCHAR(240),
lat REAL CHECK(lat IS NULL OR (lat BETWEEN -90 AND 90)),
lng REAL CHECK(lng IS NULL OR (lng BETWEEN -180 AND 180)),
user_id INTEGER NOT NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT fk_posts_users FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE comments (
id SERIAL PRIMARY KEY,
contents VARCHAR(240) NOT NULL,
post_id INTEGER NOT NULL,
user_id INTEGER NOT NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT fk_comments_posts FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
CONSTRAINT fk_comments_users FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE likes (
id SERIAL PRIMARY KEY,
user_id INTEGER NOT NULL,
post_id INTEGER,
comment_id INTEGER ,
created_at TIMESTAMP,
CONSTRAINT fk_likes_users FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
CONSTRAINT fk_likes_posts FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
CONSTRAINT fk_likes_comments FOREIGN KEY (comment_id) REFERENCES comments(id) ON DELETE CASCADE,
CHECK(COALESCE(comment_id)::BOOLEAN::INTEGER + COALESCE(post_id)::BOOLEAN::INTEGER =1),
UNIQUE(user_id, post_id, comment_id)
);

-- Add constraints after creating table
--ALTER TABLE likes
--ADD CONSTRAINT fk_likes_posts FOREIGN KEY post_id REFERENCES posts(id) ;
--
--ALTER TABLE likes
--ADD CONSTRAINT fk_likes_comments FOREIGN KEY comment_id REFERENCES commenst(id);


--ALTER TABLE likes
--ADD CONSTRAINT check_post_comment_ids
--CHECK (
--	COALESCE ((post_id)::BOOLEAN::INTEGER, 0)
--	+
--	COALESCE ((comment_id)::BOOLEAN::INTEGER, 0)
--)=1
--);

CREATE TABLE photo_tags (
id SERIAL PRIMARY KEY,
user_id INTEGER NOT NULL,
post_id INTEGER NOT NULL,
x INTEGER NOT NULL,
y INTEGER NOT NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT fk_phototags_users FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
CONSTRAINT fk_phototags_posts FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
UNIQUE(user_id, post_id)
);

CREATE TABLE caption_tags (
id SERIAL PRIMARY KEY,
user_id INTEGER NOT NULL,
post_id INTEGER NOT NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT fk_captiontags_users FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
CONSTRAINT fk_captiontags_posts FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
UNIQUE(user_id, post_id)
);

CREATE TABLE hashtags (
id SERIAL PRIMARY KEY,
title VARCHAR(20) NOT NULL UNIQUE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE hashtags_posts (
id SERIAL PRIMARY KEY,
post_Id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
hashtag_id INTEGER NOT NULL REFERENCES hashtags(id) ON DELETE CASCADE,
UNIQUE(post_id, hashtag_id)
);

CREATE TABLE followers (
id SERIAL PRIMARY KEY,
leader_Id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
follower_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
UNIQUE(leader_id, follower_id)
);

// TODO Add some users to test CRUD operations



